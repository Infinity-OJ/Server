// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/infinity-oj/server/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ProblemRepository is an autogenerated mock type for the ProblemRepository type
type ProblemRepository struct {
	mock.Mock
}

// CreateProblem provides a mock function with given fields: title, locale, publicSpace, privateSpace
func (_m *ProblemRepository) CreateProblem(title string, locale string, publicSpace string, privateSpace string) (*models.Page, error) {
	ret := _m.Called(title, locale, publicSpace, privateSpace)

	var r0 *models.Page
	if rf, ok := ret.Get(0).(func(string, string, string, string) *models.Page); ok {
		r0 = rf(title, locale, publicSpace, privateSpace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Page)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(title, locale, publicSpace, privateSpace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemById provides a mock function with given fields: problemId
func (_m *ProblemRepository) FindProblemById(problemId string) (*models.Problem, error) {
	ret := _m.Called(problemId)

	var r0 *models.Problem
	if rf, ok := ret.Get(0).(func(string) *models.Problem); ok {
		r0 = rf(problemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Problem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(problemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
