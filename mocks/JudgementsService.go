// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	repositories "github.com/infinity-oj/server/internal/app/judgements/repositories"
	models "github.com/infinity-oj/server/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// JudgementsService is an autogenerated mock type for the JudgementsService type
type JudgementsService struct {
	mock.Mock
}

// Create provides a mock function with given fields: tp, properties, inputs
func (_m *JudgementsService) Create(tp string, properties map[string]string, inputs [][]byte) (*models.Judgement, error) {
	ret := _m.Called(tp, properties, inputs)

	var r0 *models.Judgement
	if rf, ok := ret.Get(0).(func(string, map[string]string, [][]byte) *models.Judgement); ok {
		r0 = rf(tp, properties, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Judgement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string, [][]byte) error); ok {
		r1 = rf(tp, properties, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *JudgementsService) List() {
	_m.Called()
}

// PullJudgement provides a mock function with given fields: judgementType
func (_m *JudgementsService) PullJudgement(judgementType string) (string, *repositories.JudgementElement) {
	ret := _m.Called(judgementType)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(judgementType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *repositories.JudgementElement
	if rf, ok := ret.Get(1).(func(string) *repositories.JudgementElement); ok {
		r1 = rf(judgementType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*repositories.JudgementElement)
		}
	}

	return r0, r1
}

// PushJudgement provides a mock function with given fields: token, outputs
func (_m *JudgementsService) PushJudgement(token string, outputs [][]byte) error {
	ret := _m.Called(token, outputs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, [][]byte) error); ok {
		r0 = rf(token, outputs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields:
func (_m *JudgementsService) Update() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
