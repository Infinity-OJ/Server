// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	repositories "github.com/infinity-oj/server/internal/app/judgements/repositories"
	mock "github.com/stretchr/testify/mock"
)

// JudgementsService is an autogenerated mock type for the JudgementsService type
type JudgementsService struct {
	mock.Mock
}

// CreateJudgement provides a mock function with given fields: submissionId, publicSpace, privateSpace, userSpace, testCase
func (_m *JudgementsService) CreateJudgement(submissionId uint64, publicSpace string, privateSpace string, userSpace string, testCase string) error {
	ret := _m.Called(submissionId, publicSpace, privateSpace, userSpace, testCase)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string, string, string, string) error); ok {
		r0 = rf(submissionId, publicSpace, privateSpace, userSpace, testCase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchFile provides a mock function with given fields: fileSpace, fileName
func (_m *JudgementsService) FetchFile(fileSpace string, fileName string) ([]byte, error) {
	ret := _m.Called(fileSpace, fileName)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(fileSpace, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(fileSpace, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchJudgement provides a mock function with given fields:
func (_m *JudgementsService) FetchJudgement() *repositories.Judgement {
	ret := _m.Called()

	var r0 *repositories.Judgement
	if rf, ok := ret.Get(0).(func() *repositories.Judgement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.Judgement)
		}
	}

	return r0
}

// FetchJudgementByToken provides a mock function with given fields: token
func (_m *JudgementsService) FetchJudgementByToken(token string) *repositories.Judgement {
	ret := _m.Called(token)

	var r0 *repositories.Judgement
	if rf, ok := ret.Get(0).(func(string) *repositories.Judgement); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.Judgement)
		}
	}

	return r0
}

// FinishJudgement provides a mock function with given fields: token, score, msg
func (_m *JudgementsService) FinishJudgement(token string, score uint64, msg string) error {
	ret := _m.Called(token, score, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64, string) error); ok {
		r0 = rf(token, score, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *JudgementsService) List() {
	_m.Called()
}
