// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	repositories "github.com/infinity-oj/server/internal/app/judgements/repositories"
	models "github.com/infinity-oj/server/internal/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// JudgementsRepository is an autogenerated mock type for the JudgementsRepository type
type JudgementsRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tp, properties, inputs
func (_m *JudgementsRepository) Create(tp string, properties map[string]string, inputs [][]byte) (*models.Judgement, error) {
	ret := _m.Called(tp, properties, inputs)

	var r0 *models.Judgement
	if rf, ok := ret.Get(0).(func(string, map[string]string, [][]byte) *models.Judgement); ok {
		r0 = rf(tp, properties, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Judgement)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string, [][]byte) error); ok {
		r1 = rf(tp, properties, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields:
func (_m *JudgementsRepository) Fetch() *models.Judgement {
	ret := _m.Called()

	var r0 *models.Judgement
	if rf, ok := ret.Get(0).(func() *models.Judgement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Judgement)
		}
	}

	return r0
}

// FetchJudgementInQueue provides a mock function with given fields: tp
func (_m *JudgementsRepository) FetchJudgementInQueue(tp string) *repositories.JudgementElement {
	ret := _m.Called(tp)

	var r0 *repositories.JudgementElement
	if rf, ok := ret.Get(0).(func(string) *repositories.JudgementElement); ok {
		r0 = rf(tp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.JudgementElement)
		}
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *JudgementsRepository) List() {
	_m.Called()
}

// ReturnJudgementInQueue provides a mock function with given fields: element, outputs
func (_m *JudgementsRepository) ReturnJudgementInQueue(element *repositories.JudgementElement, outputs [][]byte) error {
	ret := _m.Called(element, outputs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*repositories.JudgementElement, [][]byte) error); ok {
		r0 = rf(element, outputs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: judgement
func (_m *JudgementsRepository) Update(judgement *models.Judgement) error {
	ret := _m.Called(judgement)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Judgement) error); ok {
		r0 = rf(judgement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
