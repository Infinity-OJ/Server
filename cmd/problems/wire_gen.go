// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/infinity-oj/server/internal/app/ctl/grpcclients"
	"github.com/infinity-oj/server/internal/app/problems"
	"github.com/infinity-oj/server/internal/app/problems/controllers"
	"github.com/infinity-oj/server/internal/app/problems/grpcservers"
	"github.com/infinity-oj/server/internal/app/problems/repositories"
	"github.com/infinity-oj/server/internal/app/problems/services"
	"github.com/infinity-oj/server/internal/pkg/app"
	"github.com/infinity-oj/server/internal/pkg/config"
	"github.com/infinity-oj/server/internal/pkg/consul"
	"github.com/infinity-oj/server/internal/pkg/database"
	"github.com/infinity-oj/server/internal/pkg/jaeger"
	"github.com/infinity-oj/server/internal/pkg/log"
	"github.com/infinity-oj/server/internal/pkg/transports/grpc"
	"github.com/infinity-oj/server/internal/pkg/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	problemsOptions, err := problems.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	problemRepository := repositories.NewMysqlUsersRepository(logger, db)
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	clientOptions, err := grpc.NewClientOptions(viper, tracer)
	if err != nil {
		return nil, err
	}
	client, err := grpc.NewClient(consulOptions, clientOptions)
	if err != nil {
		return nil, err
	}
	filesClient, err := grpcclients.NewFilesClient(client)
	if err != nil {
		return nil, err
	}
	fileService := services.NewFileService(filesClient)
	problemsService := services.NewProblemService(logger, problemRepository, fileService)
	problemController := controllers.NewProblemsController(logger, problemsService)
	initControllers := controllers.CreateInitControllersFn(problemController)
	engine := http.NewRouter(httpOptions, logger, initControllers, tracer)
	apiClient, err := consul.New(consulOptions)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine, apiClient)
	if err != nil {
		return nil, err
	}
	serverOptions, err := grpc.NewServerOptions(viper)
	if err != nil {
		return nil, err
	}
	problemService, err := grpcservers.NewUsersServer(logger, problemsService)
	if err != nil {
		return nil, err
	}
	initServers := grpcservers.CreateInitServersFn(problemService)
	grpcServer, err := grpc.NewServer(serverOptions, logger, initServers, apiClient, tracer)
	if err != nil {
		return nil, err
	}
	application, err := problems.NewApp(problemsOptions, logger, server, grpcServer)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, database.ProviderSet, services.ProviderSet, repositories.ProviderSet, consul.ProviderSet, jaeger.ProviderSet, http.ProviderSet, grpc.ProviderSet, grpcclients.ProviderSet, problems.ProviderSet, controllers.ProviderSet, grpcservers.ProviderSet)
