// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/Infinity-OJ/Server/internal/app/ctl"
	"github.com/Infinity-OJ/Server/internal/app/ctl/commands/file"
	"github.com/Infinity-OJ/Server/internal/app/ctl/commands/judgement"
	"github.com/Infinity-OJ/Server/internal/app/ctl/commands/problem"
	"github.com/Infinity-OJ/Server/internal/app/ctl/commands/submission"
	"github.com/Infinity-OJ/Server/internal/app/ctl/commands/user"
	"github.com/Infinity-OJ/Server/internal/app/ctl/grpcclients"
	"github.com/Infinity-OJ/Server/internal/app/ctl/service"
	"github.com/Infinity-OJ/Server/internal/pkg/app"
	"github.com/Infinity-OJ/Server/internal/pkg/config"
	"github.com/Infinity-OJ/Server/internal/pkg/consul"
	"github.com/Infinity-OJ/Server/internal/pkg/jaeger"
	"github.com/Infinity-OJ/Server/internal/pkg/log"
	"github.com/Infinity-OJ/Server/internal/pkg/transports/grpc"
	"github.com/google/wire"
	"github.com/urfave/cli/v2"
)

// Injectors from wire.go:

func CreateApp(cf string) (*cli.App, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logOptions, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(logOptions)
	if err != nil {
		return nil, err
	}
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	clientOptions, err := grpc.NewClientOptions(viper, tracer)
	if err != nil {
		return nil, err
	}
	client, err := grpc.NewClient(options, clientOptions)
	if err != nil {
		return nil, err
	}
	usersClient, err := grpcclients.NewUsersClient(client)
	if err != nil {
		return nil, err
	}
	userService := service.NewUserService(usersClient)
	createUserCommand := user.NewCreateUserCommand(userService)
	command := user.NewUserCommand(createUserCommand)
	filesClient, err := grpcclients.NewFilesClient(client)
	if err != nil {
		return nil, err
	}
	fileService := service.NewFileService(filesClient)
	createDirectoryCommand := file.NewCreateDirectoryCommand(fileService)
	fileCommand := file.NewFileCommand(createDirectoryCommand, fileService)
	problemsClient, err := grpcclients.NewProblemsClient(client)
	if err != nil {
		return nil, err
	}
	problemService := service.NewProblemService(problemsClient)
	problemCommand := problem.NewProblemCommand(problemService)
	submissionsClient, err := grpcclients.NewSubmissionsClient(client)
	if err != nil {
		return nil, err
	}
	submissionService := service.NewSubmissionService(submissionsClient)
	submissionCommand := submission.NewSubmissionCommand(submissionService)
	judgementsClient, err := grpcclients.NewJudgementsClient(client)
	if err != nil {
		return nil, err
	}
	judgementService := service.NewJudgementService(judgementsClient)
	judgementCommand := judgement.NewJudgementCommand(judgementService)
	app := ctl.NewApp(command, fileCommand, problemCommand, submissionCommand, judgementCommand)
	return app, nil
}

// wire.go:

var providerSet = wire.NewSet(jaeger.ProviderSet, app.ProviderSet, log.ProviderSet, config.ProviderSet, user.ProviderSet, file.ProviderSet, problem.ProviderSet, submission.ProviderSet, judgement.ProviderSet, service.ProviderSet, consul.ProviderSet, ctl.ProviderSet, grpc.ProviderSet, grpcclients.ProviderSet)
